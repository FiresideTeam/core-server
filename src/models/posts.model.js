// See http://docs.sequelizejs.com/en/latest/docs/models-definition/
// for more of what you can do here.
const Sequelize = require('sequelize');
const DataTypes = Sequelize.DataTypes;

module.exports = function (app) {
  const sequelizeClient = app.get('sequelizeClient');
  const posts = sequelizeClient.define('posts', {
    id: {
      type: DataTypes.UUID,
      allowNull: false,
      unique: true,
      primaryKey: true
    },
    image: {
      //was told by internet BLOB is a good way to store images, however it'll be up to the client on how images are compressed and decompressed
      type: DataTypes.BLOB,
      allowNull: false,
    },
    description: {
      //500 character limit
      type: DataTypes.STRING(500),
      allowNull: false,
      defaultValue: " "
    },
    type: {
      type: DataTypes.STRING(500),
      allowNull: true
    },
    extra: {
      type: DataTypes.JSON,
      allowNull: false
    }
    //was gonna add timestamp here however sequelize kindly already adds one automatically. Times displayed on the client should probably
    //be generated by the client. At least thats how immessage works. I will however provide the createdAt attribute (as provided by sequelizer)
    //to the client when retrieving a post or a message for that matter for the purpose of keeping tack what posts are recent on the server level for
    //find and get requests
  }, {
    hooks: {
      beforeCount(options) {
        options.raw = true;
      }
    }
  });

  // eslint-disable-next-line no-unused-vars
  posts.associate = function (models) {
    const { users } = models;
    //not really sure if this is necassary, as this association is also defined in the users model
    //but i dont think it'll hurt and better safe than sorry
    posts.belongsTo(users);
  };

  return posts;
};
